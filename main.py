"""
AnalyticalBlackLight
Made by perpetualCreations

Uses pytrends to gather bulk information on search interest over time for certain keywords.
Designed originally for finding search interest for keywords that cheating students may use during tests.

This serves as a tool to increase the number of keywords that can be analyzed at the same time, in an organized and controlled manner.
Generates graph or CSV file as output.

List of keywords must be a multiple of 5.
"""

from pytrends.request import TrendReq
from random import randint
import pandas, configparser, argparse
import matplotlib.pyplot as plt

# argparse
parameters = argparse.ArgumentParser(prog = "AnalyticalBlackLight", description = "Produces CSV file or graph of search interest of keywords outlined in keywords.txt. See readme.md for more information.")
parameters.add_argument("--csv", dest = "CSV_out", help = "Toggle CSV export, with 1 or 0.", type = int)
parameters.add_argument("--graph", dest = "graph_out", help = "Toggle graph output, with 1 or 0.", type = int)
parameters.add_argument("--showgraph", dest = "graph_show", help = "Toggle built-in viewer for graphing.", type = int)
parameters.add_argument("-c", dest = "use_config", help = "Toggle whether to read form targets.cfg, with 1 or 0.", type = int)
parameters.add_argument("-s", dest = "start_date", help = "Start date of range, format YYYY-MM-DD.", type = str)
parameters.add_argument("-e", dest = "end_date", help = "End date of range, format YYYY-MM-DD.", type = str)
parameters.add_argument("-n", dest = "country", help = "Narrow down by country, i.e US...", type = str)
parameters.add_argument("-p", dest = "state", help = "Narrow down by state, i.e CA...", type = str)
parameters.add_argument("-x", dest = "county", help = "Narrow down by county. See documentation.", type = str)
parameters.add_argument("--dialogue", dest = "dialogue", help = "Do not use this argument! This is for the GUI wrapper, so it displays a dialogue at the end of processing.", type = int)

arguments = parameters.parse_args()

# parameter objects
if arguments.use_config == 1:
    targets_parser = configparser.ConfigParser()
    targets_parser.read("targets.cfg")
    target_date_1 = targets_parser["TIME"]["date_1"]
    target_date_2 = targets_parser["TIME"]["date_2"]
    target_country = targets_parser["LOCATION"]["country"]
    target_state = targets_parser["LOCATION"]["state"]
    target_county = targets_parser["LOCATION"]["county"]
else:
    target_date_1 = arguments.start_date
    target_date_2 = arguments.end_date
    target_country = arguments.country
    target_state = arguments.state
    target_county = arguments.county
pass

pytrend = TrendReq() # object for requesting trends payloads.

collection_list = [] # dataframes generated by collect() are appended to this list.
collect_cycle = 0 # collection cycles elapsed.

def keywords_read():
    """
    Reads keywords.
    :return: list of keywords.
    """
    with open("keywords.txt") as keywords:
        return keywords.read().splitlines()
    pass
pass

print("Targets: \nFirst Date: " + target_date_1 + "\nSecond Date: " + target_date_2 + "\nCountry: " + target_country +
      "\nState: " + target_state + "\nCounty Code: " + target_county + "\n")
print("Loaded keywords: ")
print(keywords_read())

# data requests
while collect_cycle != len(keywords_read()):
    pytrend.build_payload(
        [keywords_read()[collect_cycle], keywords_read()[collect_cycle + 1], keywords_read()[collect_cycle + 2],
         keywords_read()[collect_cycle + 3], keywords_read()[collect_cycle + 4]],
        timeframe = target_date_1 + " " + target_date_2,
        geo = target_country + "-" + target_state + "-" + target_county)
    collection_list.append(pytrend.interest_over_time())
    collect_cycle += 5
pass

# merging dataframes
export_dataframe = pandas.concat(collection_list, axis = 1)

# remove isPartial columns
del export_dataframe["isPartial"]

# exports
if arguments.CSV_out == 1:
    print("Exporting to CSV...")
    export_dataframe.to_csv(str(randint(1, 9999999)) + ".csv")
pass

if arguments.graph_out == 1:
    export_dataframe.plot(kind = "bar", figsize = (20, 20)); plt.legend(loc = "right", prop = {"size": 5})
    plt.savefig(str(randint(1, 9999999)) + ".png")
pass

if arguments.graph_show == 1:
    export_dataframe.plot(kind = "bar", figsize = (20, 20)); plt.legend(loc = "right", prop = {"size": 5})
    plt.show()
pass

# check for dialogue request, this should only be triggered by GUI wrapper!
if arguments.dialogue == 1:
    import tkinter.messagebox as dialogue
    dialogue.showinfo("ABL: Task Finished", "Task has finished.")
pass
